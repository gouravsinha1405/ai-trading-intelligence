"""
Integration tests for the main application
"""
import os
import sys
import unittest
from unittest.mock import MagicMock, Mock, patch

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

# Mock streamlit before importing anything that uses it
sys.modules["streamlit"] = MagicMock()


class TestMainApplication(unittest.TestCase):
    """Test main application functionality"""

    @patch('streamlit.set_page_config')
    @patch('streamlit.sidebar')
    @patch('streamlit.session_state', {})
    def test_app_initialization(self, mock_sidebar, mock_config):
        """Test that the main app initializes correctly"""
        try:
            # Import and run basic initialization
            import main

            # Check that Streamlit configuration is called
            mock_config.assert_called()

            # Test should pass if no exceptions are raised
            self.assertTrue(True)
        except ImportError as e:
            self.skipTest(f"Cannot import main module: {e}")

    def test_import_all_modules(self):
        """Test that all core modules can be imported"""
        modules_to_test = [
            'src.auth.auth_manager',
            'src.data.jugaad_client',
            'src.data.data_cleaner',
            'src.utils.config',
        ]

        for module_name in modules_to_test:
            try:
                __import__(module_name)
            except ImportError as e:
                self.fail(f"Failed to import {module_name}: {e}")

    @patch('streamlit.session_state', {})
    def test_auth_integration(self):
        """Test authentication system integration"""
        try:
            from src.auth.auth_manager import AuthManager

            auth_manager = AuthManager()

            # Test that auth manager initializes
            self.assertIsNotNone(auth_manager)

            # Test basic authentication flow
            self.assertFalse(auth_manager.is_authenticated())

        except Exception as e:
            self.fail(f"Authentication integration failed: {e}")

    def test_data_client_integration(self):
        """Test data client integration"""
        try:
            from src.data.jugaad_client import JugaadClient

            client = JugaadClient()

            # Test that client initializes
            self.assertIsNotNone(client)

            # Test symbol validation
            self.assertTrue(client.validate_symbol('RELIANCE'))
            self.assertFalse(client.validate_symbol(''))

        except Exception as e:
            self.fail(f"Data client integration failed: {e}")


class TestPageIntegration(unittest.TestCase):
    """Test individual page integration"""

    @patch('streamlit.session_state', {'authenticated': True, 'username': 'admin'})
    @patch('streamlit.title')
    @patch('streamlit.write')
    def test_dashboard_page(self, mock_write, mock_title):
        """Test dashboard page loads correctly"""
        try:
            import pages

            # If pages can be imported, integration is working
            self.assertTrue(True)
        except ImportError:
            self.skipTest("Pages module not available for testing")

    def test_page_files_exist(self):
        """Test that all page files exist"""
        page_files = [
            'pages/1_ðŸ“Š_Dashboard.py',
            'pages/2_ðŸ”§_Strategy_Builder.py',
            'pages/3_ðŸ“ˆ_Live_Trading.py',
            'pages/4_ðŸ“°_News_Analysis.py',
            'pages/5_ðŸ”„_Backtesting.py',
            'pages/6_ðŸ¤–_AI_Assistant.py',
            'pages/7_ðŸ“š_How_to_Use.py'
        ]

        base_path = os.path.join(os.path.dirname(__file__), '..')

        for page_file in page_files:
            full_path = os.path.join(base_path, page_file)
            self.assertTrue(
                os.path.exists(full_path),
                f"Page file {page_file} does not exist"
            )


class TestConfigurationIntegration(unittest.TestCase):
    """Test configuration and environment integration"""

    def test_required_environment_variables(self):
        """Test that configuration handles missing environment variables"""
        try:
            from src.utils.config import Config

            config = Config()

            # Test that config initializes even without env vars
            self.assertIsNotNone(config)

        except Exception as e:
            self.fail(f"Configuration integration failed: {e}")

    @patch.dict(os.environ, {
        'GROQ_API_KEY': 'test_key',
        'ALPHA_VANTAGE_API_KEY': 'test_key',
        'NEWS_API_KEY': 'test_key'
    })
    def test_configuration_with_env_vars(self):
        """Test configuration with environment variables set"""
        try:
            from src.utils.config import Config

            config = Config()

            # Test that configuration loads properly
            self.assertIsNotNone(config)

        except Exception as e:
            self.fail(f"Configuration with env vars failed: {e}")


if __name__ == '__main__':
    unittest.main()
