name: 🔒 Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan on Mondays at 2 AM
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔧 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r requirements.txt

      - name: 🔍 Run Bandit Security Scan
        run: |
          echo "🔍 Running Bandit security scan..."
          bandit -r src/ pages/ main.py -f json -o bandit-results.json || true
          bandit -r src/ pages/ main.py -f txt

      - name: 🔒 Check for Known Vulnerabilities
        run: |
          echo "🔒 Running Safety vulnerability check..."
          safety check --json > safety-results.json || echo "⚠️ Safety check completed with warnings"
          safety check

      - name: 🧪 Run Semgrep Security Analysis
        run: |
          semgrep --config=auto --json --output=semgrep-results.json .
          semgrep --config=auto .

      - name: 🐳 Build Docker Image for Scanning
        id: docker-build
        run: |
          echo "🐳 Building Docker image for security scanning..."
          if docker build -t ai-trading-security:latest .; then
            echo "✅ Docker build successful"
            echo "build_success=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Docker build failed, will skip Docker security scan"
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: 🔍 Scan Docker Image with Trivy
        if: steps.docker-build.outputs.build_success == 'true'
        run: |
          echo "🔍 Running Trivy Docker security scan..."
          
          # Scan the Docker image and generate SARIF
          docker run --rm -v "$(pwd)":/workspace \
            aquasec/trivy:latest image \
            --format sarif \
            --output /workspace/trivy-docker-results.sarif \
            ai-trading-security:latest || echo "⚠️ Trivy scan completed with warnings"
          
          echo "✅ Docker security scan completed"
        continue-on-error: true

      - name: 🔧 Create Fallback SARIF File
        if: steps.docker-build.outputs.build_success != 'true'
        run: |
          echo "🔧 Creating fallback SARIF file (Docker build failed)..."
          cat > trivy-docker-results.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "trivy",
                    "version": "fallback",
                    "informationUri": "https://github.com/aquasecurity/trivy"
                  }
                },
                "results": [
                  {
                    "ruleId": "docker-build-failed",
                    "level": "note",
                    "message": {
                      "text": "Docker build failed - Docker security scan skipped"
                    },
                    "locations": [
                      {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "Dockerfile"
                          },
                          "region": {
                            "startLine": 1,
                            "startColumn": 1
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          echo "✅ Fallback SARIF file created"

      - name: � Verify SARIF File Exists
        run: |
          if [ -f "trivy-docker-results.sarif" ]; then
            echo "✅ SARIF file exists ($(wc -c < trivy-docker-results.sarif) bytes)"
            echo "📋 File content preview:"
            head -n 10 trivy-docker-results.sarif
          else
            echo "❌ SARIF file missing - creating minimal fallback"
            echo '{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "trivy"}}, "results": []}]}' > trivy-docker-results.sarif
          fi

      - name: �📊 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name != 'pull_request' && hashFiles('trivy-docker-results.sarif') != ''
        continue-on-error: true
        with:
          sarif_file: |
            trivy-docker-results.sarif

      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            semgrep-results.json
            trivy-docker-results.sarif

      - name: 🚨 Security Notifications  
        if: failure()
        uses: 8398a7/action-slack@v3
        continue-on-error: true
        with:
          status: failure
          text: |
            🚨 **Security Scan Failed!**
            🔍 Repository: ${{ github.repository }}
            📝 Commit: ${{ github.sha }}
            🔗 View Results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  dependency-check:
    name: 📦 Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'AI Trading Platform'
          path: '.'
          format: 'ALL'

      - name: 📤 Upload Dependency Check Results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-results
          path: reports/

  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  code-analysis:
    name: 🔬 Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.repository_owner == github.actor
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔬 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
