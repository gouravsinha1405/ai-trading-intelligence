name: 🚀 AI Trading Platform CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # Code Quality & Security Checks
  # ============================================================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety
          pip install -r requirements.txt

      - name: 🎨 Check code formatting with Black
        run: |
          black --check --diff .

      - name: 📊 Check import sorting with isort
        run: |
          isort --check-only --diff .

      - name: 🔍 Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: � Run Bandit Security Scan
        run: |
          echo "🔍 Running Bandit security scan..."
          bandit -r src/ pages/ main.py -f json -o bandit-report.json || true
          bandit -r src/ pages/ main.py -f txt

      - name: 🔒 Check for known security vulnerabilities
        run: |
          echo "🔒 Running Safety vulnerability check..."
          safety check --json > safety-report.json || echo "⚠️ Safety check completed with warnings"
          safety check

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ============================================================================
  # Automated Testing
  # ============================================================================
  test:
    name: 🧪 Automated Testing
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock streamlit
          pip install -r requirements.txt

      - name: 🧪 Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        env:
          PYTHONPATH: ${{ github.workspace }}/src

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 🚀 Test Streamlit app startup
        run: |
          timeout 30 streamlit run main.py --server.headless true --server.port 8501 &
          sleep 10
          curl -f http://localhost:8501/_stcore/health || exit 1
          pkill -f streamlit

  # ============================================================================
  # Docker Build & Security Scan
  # ============================================================================
  docker-build:
    name: 🐳 Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ai-trading-platform:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Run Trivy vulnerability scanner
        run: |
          echo "🔍 Running Trivy vulnerability scanner..."
          # Create empty SARIF file as fallback
          echo '{"runs": [{"tool": {"driver": {"name": "trivy"}}, "results": []}]}' > trivy-results.sarif
          
          # Run Trivy scan (continue on error)
          docker run --rm -v "$(pwd)":/workspace \
            aquasec/trivy:latest image \
            --format sarif \
            --output /workspace/trivy-results.sarif \
            ai-trading-platform:${{ github.sha }} || echo "⚠️ Trivy scan completed with warnings"
          
          echo "✅ Trivy scan output generated"

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚄 Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: 🚀 Deploy to Railway Staging
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway link ${{ secrets.RAILWAY_STAGING_PROJECT_ID }}
          railway up --service ${{ secrets.RAILWAY_STAGING_SERVICE }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: 🔍 Health Check Staging
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/_stcore/health || exit 1
          echo "✅ Staging deployment successful!"

      - name: 💬 Staging Deployment Notification
        uses: 8398a7/action-slack@v3
        if: always()
        continue-on-error: true
        with:
          status: ${{ job.status }}
          text: |
            🚀 Staging Deployment: ${{ job.status }}
            📝 Commit: ${{ github.event.head_commit.message }}
            🔗 URL: ${{ secrets.STAGING_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚄 Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: 🌟 Deploy to Railway Production
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway up --service ${{ secrets.RAILWAY_SERVICE }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: 🔍 Health Check Production
        run: |
          sleep 30
          curl -f https://aitrading-production.up.railway.app/_stcore/health || exit 1
          echo "✅ Production deployment successful!"

      - name: 🏷️ Create Release Tag
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TAG="v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)"
          git tag $TAG
          git push origin $TAG

      - name: 📢 Production Deployment Notification
        uses: 8398a7/action-slack@v3
        if: always()
        continue-on-error: true
        with:
          status: ${{ job.status }}
          text: |
            🌟 Production Deployment: ${{ job.status }}
            📝 Commit: ${{ github.event.head_commit.message }}
            🔗 URL: https://aitrading-production.up.railway.app
            🏷️ Version: v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # Performance & Load Testing
  # ============================================================================
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: ⚡ Run performance tests
        run: |
          k6 run tests/performance/load-test.js
        env:
          TEST_URL: ${{ secrets.STAGING_URL }}

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json
